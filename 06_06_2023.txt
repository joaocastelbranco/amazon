a=1.2
print("A instalar pacotes")
import warnings
warnings.filterwarnings('ignore')
import sys
from IPython import get_ipython
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
driver = webdriver.Chrome(ChromeDriverManager().install())
driver.quit()
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import ElementNotInteractableException
from selenium.common.exceptions import NoSuchWindowException
from selenium.common.exceptions import WebDriverException
import re
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
timeout = 10
wait = WebDriverWait(driver, timeout)
import time
#####################################################################

def amazon_es ():
    print("Código para Amazon Espanha iniciado")
    marketplace = "Espanha"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re

    
    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_email_list2 = []
    seller_phone_list2 = []
   

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.es")
    time.sleep(a*2)
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass
    try :
        try:
            accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
            accept_cookies.click()
        except ElementNotInteractableException:
            pass
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.es")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.es")
            time.sleep(a*3)
            attempts += 1

    if attempts == max_attempts:
        print("Máximo de tentativas, tente de novo.")
    time.sleep(a*2)

    driver.maximize_window()
    time.sleep(a*2)
    
    #inserir codigo postal
    try:
        postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
        postal_code_box.clear()
        postal_code_box.send_keys("28036")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    
    update_button = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass

    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:

        
            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.es/dp/'
            driver.get(url+asin_code)
            time.sleep(a*3)
            
            # find the box with the other sellers information1

            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue       
                
                
            #numero ofertas
            try:
                time.sleep(a*3)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11

            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11

            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
            
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass

                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass

            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID,'aod-offer')
            i=1
            for offer in offers:
                try:
                    

                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ','')
                    seller_price_unit = seller_price_unit.replace('.','')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "GRATIS" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("Entrega por ") + len("Entrega por ") # find the index of the word "IVA:" and add its length to get the starting index
                        end_index_entrega = entrega.find("€", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1        
                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass

            print("Produto "+str(j)+" adicionado")
            j=j+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass

    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    
    print("Tabela feita")
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()

    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:

            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
            
            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address = "Não existe"
                seller_address_list2.append(seller_address2)
                seller_email = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_email = "Não existe"
                seller_phone_list2.append(seller_phone2)
                print("Página de vendedor não dispovível")
                continue

            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            
            #Tentar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
                    
            # tentar extrair informaçao da primeira parte (email e telefone)
            try:            
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Teléfono") + len("Teléfono") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
            

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
                    

            

            except NoSuchElementException:
                primeira_caixa = "não existe"
                seller_phone = ''
                seller_phone_list.append(seller_phone)
                seller_email = ''
                seller_email_list.append(seller_email)
                pass



            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()

                #morada
                start_index_address = segunda_caixa.find("Dirección empresarial:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Dirección empresarial:") + len("Dirección empresarial:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Dirección de servicio al cliente:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Dirección de servicio al cliente:") + len("Dirección de servicio al cliente:")
                end_index_address2 = segunda_caixa.find("Dirección empresarial:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)
                
                #VAT
                start_index_VAT = segunda_caixa.find("IVA: ") + len("IVA: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Nombre de empresa: ") + len("Nombre de empresa: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
                
                
                #Telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Teléfono") + len("Teléfono") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            

            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass  
         
    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_es = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_es['Código país'] = tabela_final_es['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")
    #print(tabela_final_es)

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    # quit the webdriver
    driver.quit()

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "ES" sheet
    ws = wb['ES']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_es, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')
    
def amazon_it ():
    print("Código para Amazon Italia iniciado")
    marketplace = "Italia"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.it")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.it")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.it")
            time.sleep(a*3)
            attempts += 1

    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)

    driver.maximize_window()
     #inserir codigo postal
    try:
        postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
        postal_code_box.clear()
        postal_code_box.send_keys("00186")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    

    update_button = driver.find_element(By.ID, "GLUXZipUpdate")
    update_button.click()
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass

    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:


            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.it/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue     
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11

            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
                
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass
                                
                    except NoSuchElementException:
                        pass
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass


            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID,'aod-offer')
            i=1
            for offer in offers:
                try:
                    
                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ','')
                    seller_price_unit = seller_price_unit.replace('.','')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()

                    if "GRATUITA" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("Consegna a") + len("Consegna a") # find the index of the word "IVA:" and add its length to get the starting index
                        end_index_entrega = entrega.find("€", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1
            
                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass      

            print("Produto "+str(j)+" adicionado")
            j=j+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass      
        

    asin_list = list(map(str, asin_list))
    #print(asin_list)
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    
    print("Tabela feita")
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()

    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:

            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
            
            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                print("Página de vendedor não dispovível")
                continue

            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            
            #tentar botao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
                    
            # tentar extrair informaçao da primeira parte (email e telefone)
            try:            
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Telefono") + len("Telefono") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
                    


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass



            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()

                #morada
                start_index_address = segunda_caixa.find("Indirizzo aziendale:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Indirizzo aziendale:") + len("Indirizzo aziendale:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Indirizzo Servizio clienti:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Indirizzo Servizio clienti:") + len("Indirizzo Servizio clienti:")
                end_index_address2 = segunda_caixa.find("Indirizzo aziendale:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)
                
                #VAT
                start_index_VAT = segunda_caixa.find("IVA: ") + len("IVA: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Nome azienda: ") + len("Nome azienda: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
                
                #Telefone            
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Telefono") + len("Telefono") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)


            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1
        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   
    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_it = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_it['Código país'] = tabela_final_it['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")
    #print(tabela_final_it)

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "ES" sheet
    ws = wb['IT']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_it, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    # Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')

def amazon_de ():

    print("Código para Amazon Alemanha iniciado")
    marketplace = "Alemanha"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.de")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.de")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.de")
            time.sleep(a*3)
            attempts += 1
            
    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)
    
    driver.maximize_window()
    time.sleep(a*2)
    
    #inserir codigo postal
    try:
        postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
        postal_code_box.clear()
        postal_code_box.send_keys("10117")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    
    #cokies
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
    confirmar_loc.click()
    time.sleep(a*2)
    
    # escolher lingua
    lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
    lingua.click()
    time.sleep(a*2)
    escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
    escolher_alemao.click()
    time.sleep(a*2)
    confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
    confirmar_lingua.click()
    time.sleep(a*2)
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:

        try:


            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.de/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue   
                
        
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11
            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
                
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass

                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass         
                
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:
                try:


                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)

                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ','')
                    seller_price_unit = seller_price_unit.replace('.','')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "GRATIS" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("für ") + len("für ") # find the index of the word "IVA:" and add its length to get the starting index
                        end_index_entrega = entrega.find("€", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1


                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass    
            print("Produto "+str(j)+" adicionado")
            j=j+1  

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   
        
    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:
            
            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            if l == 1 :
                # escolher lingua
                lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
                lingua.click()
                time.sleep(a*2)
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
                escolher_alemao.click()
                time.sleep(a*2)
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
                confirmar_lingua.click()
                time.sleep(a*2)
            else:
                pass
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
            ########
            
            try:
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Telefon") + len("Telefon") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                                        
                

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
            


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass
                
            if seller_phone == "":
                seller_phone == "Não existe teste"
                
            if seller_email == "":
                seller_email == "Não existe teste"

            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()
                
                
                
                #morada
                start_index_address = segunda_caixa.find("Geschäftsadresse:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Geschäftsadresse:") + len("Geschäftsadresse:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Kundendienstadresse:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Kundendienstadresse:") + len("Kundendienstadresse:")
                end_index_address2 = segunda_caixa.find("Geschäftsadresse:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)


                #VAT
                start_index_VAT = segunda_caixa.find("UStID: ") + len("UStID: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Geschäftsname: ") + len("Geschäftsname: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
            
                #Numero de telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Telefon") + len("Telefon") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
            
            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_phone2= "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1
        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_de = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_de['Código país'] = tabela_final_de['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "DE" sheet
    ws = wb['DE']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_de, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')


def amazon_se ():

    print("Código para Amazon Suécia iniciado")
    marketplace = "Suecia"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    #Obter exchange rate
    driver = webdriver.Chrome(ChromeDriverManager().install())
    driver.get("https://www.google.com/")
    time.sleep(1)
    clickar_nao_cookies = driver.find_element(By.XPATH, '//*[@id="W0wltc"]/div').click()
    time.sleep(a*2)
    clickar_caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]').click()
    caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]')
    caixa_pesquisa.send_keys("swedish crown to euro")
    caixa_pesquisa.send_keys(Keys.RETURN)
    
    time.sleep(a*2)
    se_exchange_rate = driver.find_element(By.XPATH, '//*[@id="knowledge-currency__updatable-data-column"]/div[1]/div[2]/span[1]').text.strip()
    se_exchange_rate = se_exchange_rate.replace(',','.')
    se_exchange_rate = float(se_exchange_rate)
    #print(se_exchange_rate)
    driver.quit()
    
    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_email_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.se")
    driver.maximize_window()
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    # Por a morada no Amazon delivery to
    time.sleep(a*2)
    max_attempts = 5
    attempts = 0
    
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, "nav-packard-glow-loc-icon")
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery não foi encontrado ")
            driver.get("https://www.amazon.se")
            time.sleep(a*3)
            attempts += 1

    if attempts == max_attempts:
        print("Máximo de tentativas, tente de novo.")
    time.sleep(a*3)
    
    #inserir codigo postal
    try:
        postal_code_box_1= driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput_0"]')
        postal_code_box_2= driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput_1"]')
        postal_code_box_1.clear()
        postal_code_box_1.send_keys("103")
        postal_code_box_2.send_keys("16")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    
    try:
        confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
        confirmar_loc.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    time.sleep(a*1)
    
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
    lingua.click()
    time.sleep(a*2)
    escolher_sueco = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
    escolher_sueco.click()
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
    confirmar_lingua.click()
    time.sleep(a*2)
    
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:
                
            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.se/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
            time.sleep(a*2)

            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue                    

            
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11

            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11
            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
                
            
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass
                                
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass

            
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:
                try:


                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ','')
                    seller_price_unit = seller_price_unit.replace('.','')

                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                    seller_price = float(seller_price)
                    seller_price = seller_price * se_exchange_rate
                    seller_price = round(seller_price, 2)
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()


                    if "GRATIS" in entrega:
                        entrega = 0
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("") + len("") # find the index of the word "IVA:" and add its length to get the starting index
                        end_index_entrega = entrega.find("kr", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        entrega = entrega * se_exchange_rate
                        entrega = round(entrega, 2)
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass


                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1


                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass   

            print("Produto "+str(j)+" adicionado")
            j=j+1  
            
        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
   
    for link in seller_link_list:
        try:
            
            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
        

            if l == 1 :
                # escolher lingua
                lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
                lingua.click()
                time.sleep(a*2)
                try:
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
                escolher_alemao.click()
                time.sleep(a*2)
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
                confirmar_lingua.click()
                time.sleep(a*2)
            else:
                pass
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
                    
            # tentar extrair informaçao da primeira parte (email e telefone)
            try:        
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Telefon ") + len("Telefon ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                        
            
                
                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_phone2 = 'indisponível'
                seller_phone_list2.append(seller_phone2)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass



            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()

                #morada
                start_index_address = segunda_caixa.find("Företagsadress:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Företagsadress:") + len("Företagsadress:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Adress för kundservice:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Adress för kundservice:") + len("Adress för kundservice:")
                end_index_address2 = segunda_caixa.find("Företagsadress:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)

                #VAT
                start_index_VAT = segunda_caixa.find("Momsregistreringsnummer: ") + len("Momsregistreringsnummer: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Företagsnamn: ") + len("Företagsnamn: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
                
                #telefone
                
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Telefon ") + len("Telefon ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
                

            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1

        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2))

    tabela_final_se = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_se['Código país'] = tabela_final_se['Morada'].apply(extract_last_two_characters)
    
    

    print("Tabela feita")
    #print(tabela_final_se)

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "SE" sheet
    ws = wb['SE']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_se, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


        # Save the changes to the Excel file
        wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")

    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')

def amazon_fr ():

    print("Código para Amazon França iniciado")
    marketplace = "França"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.fr")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.fr")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.fr")
            time.sleep(a*3)
            attempts += 1
            

    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)
    
    driver.maximize_window()
    time.sleep(a*2)
    
    #inserir codigo postal
    try:
        postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
        postal_code_box.clear()
        postal_code_box.send_keys("75006")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    
    #cokies
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    try:
        
        confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
        confirmar_loc.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    # escolher lingua
    try:
        
        lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
        lingua.click()
        time.sleep(a*2)
        escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
        escolher_alemao.click()
        time.sleep(a*2)
        confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
        confirmar_lingua.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:

            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.fr/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue   
                
        
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11
            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
            
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass
                                
                    except NoSuchElementException:
                        pass
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass

                
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:
                try:


                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ','')
                    seller_price_unit = seller_price_unit.replace('.','')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "GRATUITE" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("à") + len("à") # find the index of the word "IVA:" and add its length to get the starting index
                        end_index_entrega = entrega.find("€", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1


                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass   

            print("Produto "+str(j)+" adicionado")
            j=j+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

        
    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:


            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            if l == 1 :
                try:
                    # escolher lingua
                    lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
                    lingua.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
                
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                
                try:
                    escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
                    escolher_alemao.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
                    
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                
                try :
                    confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
                    confirmar_lingua.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
            else:
                pass
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
            ########
            
            try:
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("téléphone") + len("téléphone") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                                        
                

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
            


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass
                
            if seller_phone == "":
                seller_phone == "Não existe teste"
                
            if seller_email == "":
                seller_email == "Não existe teste"

            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()
                
                
                
                #morada
                start_index_address = segunda_caixa.find("Adresse commerciale:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Adresse commerciale:") + len("Adresse commerciale:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Adresse de service clientèle:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Adresse de service clientèle:") + len("Adresse de service clientèle:")
                end_index_address2 = segunda_caixa.find("Adresse commerciale:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)


                #VAT
                start_index_VAT = segunda_caixa.find("TVA: ") + len("TVA: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Nom commercial: ") + len("Nom commercial: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
            
                #Numero de telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("téléphone: ") + len("téléphone: ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
            
            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_phone2= "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1

        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   
         
    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_fr = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_fr['Código país'] = tabela_final_fr['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "FR" sheet
    ws = wb['FR']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_fr, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')


            
def amazon_nl ():

    print("Código para Amazon Netherlands iniciado")
    marketplace = "Netherlands"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.nl")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.nl")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.nl")
            time.sleep(a*3)
            attempts += 1

    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)
    
    driver.maximize_window()
    time.sleep(a*2)
    
    #escolher o país
    try:
        selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryListDropdown"]/span/span').click()
        time.sleep(a*1)
        selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryList_1"]').click()
        time.sleep(a*1)
    except NoSuchElementException:
        pass  
        
    #inserir codigo postal
    #try:
    #    postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
     #   postal_code_box.clear()
      #  postal_code_box.send_keys("1025")
        
    #except NoSuchElementException:
     #   print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    #update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    #update_button.click()
    #time.sleep(a*2)
    
    #cokies
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    try:
        
        confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
        confirmar_loc.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    # escolher lingua
    try:
        
        lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
        lingua.click()
        time.sleep(a*2)
        escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
        escolher_alemao.click()
        time.sleep(a*2)
        confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
        confirmar_lingua.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:


            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.nl/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue   
                
        
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11

            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
            
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass
                                
                    except NoSuchElementException:
                        pass
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass

                
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:
                try:


                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ', '')
                    seller_price_unit = seller_price_unit.replace('€', '')
                    seller_price_unit = seller_price_unit.replace('.', '')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[3]').text.strip()

                    seller_price_cents = seller_price_cents.replace('.', '')
                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "Gratis" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("€") + len("€") #
                        end_index_entrega = entrega.find("bezorging", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                        seller_price = float(seller_price)
                        try:
                            entrega = float(entrega)
                        except ValueError:
                            entrega = 0
                        entrega = float(entrega)
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1



                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass   
                
            print("Produto "+str(j)+" adicionado")
            j=j+1
        
        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

    
    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:


            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            if l == 1 :
                try:
                    # escolher lingua
                    lingua = driver.find_element(By.XPATH, '//*[@id="icp-nav-flyout"]/span/span[2]')
                    lingua.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
                
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                
                try:
                    escolher_alemao = driver.find_element(By.XPATH, '//*[@id="icp-language-settings"]/div[2]/div/label/i')
                    escolher_alemao.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
                    
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
                
                try :
                    confirmar_lingua = driver.find_element(By.XPATH, '//*[@id="icp-save-button"]/span/input')
                    confirmar_lingua.click()
                    time.sleep(a*2)
                except NoSuchElementException:
                    pass
            else:
                pass
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
            ########
            
            try:
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Telefoonnummer") + len("Telefoonnummer") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                                        
                

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
            


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass
                
            if seller_phone == "":
                seller_phone == "Não existe teste"
                
            if seller_email == "":
                seller_email == "Não existe teste"

            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()
                
                
                
                #morada
                start_index_address = segunda_caixa.find("Vestigingsadres:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Vestigingsadres:") + len("Vestigingsadres:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Adres klantenservice:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Adres klantenservice:") + len("Adres klantenservice:")
                end_index_address2 = segunda_caixa.find("Vestigingsadres:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)


                #VAT
                start_index_VAT = segunda_caixa.find("Btw-nummer: ") + len("Btw-nummer: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Bedrijfsnaam: ") + len("Bedrijfsnaam: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
            
                #Numero de telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Telefoonnummer: ") + len("Telefoonnummer: ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
            
            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_phone2= "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1

        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   
            
    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_nl = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_nl['Código país'] = tabela_final_nl['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "NL" sheet
    ws = wb['NL']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_nl, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')
    
def amazon_uk ():

    print("Código para Amazon United Kingdom iniciado")
    marketplace = "United Kingdom"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    #Obter exchange rate
    driver = webdriver.Chrome(ChromeDriverManager().install())
    driver.get("https://www.google.com/")
    time.sleep(1)
    clickar_nao_cookies = driver.find_element(By.XPATH, '//*[@id="W0wltc"]/div').click()
    time.sleep(a*2)
    clickar_caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]').click()
    caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]')
    caixa_pesquisa.send_keys("gbp to euro")
    caixa_pesquisa.send_keys(Keys.RETURN)
    time.sleep(a*2)
    uk_exchange_rate = driver.find_element(By.XPATH, '//*[@id="knowledge-currency__updatable-data-column"]/div[1]/div[2]/span[1]').text.strip()
    uk_exchange_rate = uk_exchange_rate.replace(',','.')
    uk_exchange_rate = float(uk_exchange_rate)
    driver.quit()
    
    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.co.uk/")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.uk")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.uk")
            time.sleep(a*3)
            attempts += 1

    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)
    
    driver.maximize_window()
    time.sleep(a*2)
    
    #escolher o país
    #try:
    #    selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryListDropdown"]/span/span').click()
    #   time.sleep(a*1)
    #    selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryList_1"]').click()
    #    time.sleep(a*1)
    #except NoSuchElementException:
    #    pass  
        
    #inserir codigo postal
    try:
        postal_code_box = driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput"]')
        postal_code_box.clear()
        postal_code_box.send_keys("WC2A 3UJ")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    
    #cokies
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    try:
        
        confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
        confirmar_loc.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:


            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.co.uk/dp/'
            driver.get(url+asin_code)
            time.sleep(a*2)

            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
            
            time.sleep(a*2)
            
            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue   
                
        
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11

            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
            
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass   
                    except NoSuchElementException:
                        pass
                                
                    except NoSuchElementException:
                        pass
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass


                
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:
                try:


                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                        #//*[@id="aod-price-3"]/div/span/span[2]/span[2]
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span[2]/span[2]/span[2]').text.strip()
                        print("alternativa")
                    #print(seller_price_unit)    
                    seller_price_unit = seller_price_unit.replace(' ', '')
                    seller_price_unit = seller_price_unit.replace('£', '')
                    seller_price_unit = seller_price_unit.replace(',', '')
                    seller_price_unit = seller_price_unit.replace('.', '')
                    #print(seller_price_unit)

                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div[1]/span[2]/span[2]/span[3]').text.strip()

                    #print(seller_price_cents)
                    seller_price_cents = seller_price_cents.replace('.', '')           
                    #print(seller_price_cents)
                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                    seller_price = float(seller_price)
                    seller_price = seller_price * uk_exchange_rate
                    seller_price = round(seller_price, 2)
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "FREE" in entrega:
                        entrega = "0"
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("£") + len("£") #
                        end_index_entrega = entrega.find("delivery", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        try:
                            entrega = float(entrega)
                        except TypeError:
                            entrega = 0
                        entrega = entrega * uk_exchange_rate
                        entrega = round(entrega, 2)
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        entrega = float(entrega)
                    except ValueError:
                        entrega = 0
                    try:
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1


                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass   

            print("Produto "+str(j)+" adicionado")
            j=j+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

        
    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:


            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            if l == 1 :
                
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
        
        
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
            ########
            
            try:
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("Phone number") + len("Phone number") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(":","")
                    seller_phone =seller_phone.replace(" ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                                        
                

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
            


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass
                
            if seller_phone == "":
                seller_phone == "Não existe teste"
                
            if seller_email == "":
                seller_email == "Não existe teste"

            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()
                
                
                
                #morada
                start_index_address = segunda_caixa.find("Business Address:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Business Address:") + len("Business Address:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Customer Services Address:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Customer Services Address:") + len("Customer Services Address:")
                end_index_address2 = segunda_caixa.find("Business Address:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)


                #VAT
                start_index_VAT = segunda_caixa.find("VAT Number: ") + len("VAT Number: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Business Name: ") + len("Business Name: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
            
                #Numero de telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Phone number: ") + len("Phone number: ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_phone2= "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1

        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   

    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_uk = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_uk['Código país'] = tabela_final_uk['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "UK" sheet
    ws = wb['UK']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_uk, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')
    
def amazon_pl ():

    print("Código para Amazon Poland iniciado")
    marketplace = "Poland"

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import pandas as pd
    import time
    st = time.time()
    from datetime import datetime
    from random import randint
    from selenium.common.exceptions import NoSuchElementException
    import openpyxl
    from openpyxl import load_workbook
    from selenium.webdriver.common.action_chains import ActionChains
    import re
    class DNSResolutionError(Exception):
        print("Website nao está a responder")
        pass

    #Obter exchange rate
    driver = webdriver.Chrome(ChromeDriverManager().install())
    driver.get("https://www.google.com/")
    time.sleep(1)
    clickar_nao_cookies = driver.find_element(By.XPATH, '//*[@id="W0wltc"]/div').click()
    time.sleep(a*2)
    clickar_caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]').click()
    caixa_pesquisa = driver.find_element(By.XPATH, '//*[@id="APjFqb"]')
    caixa_pesquisa.send_keys("polish zloty to euro")
    caixa_pesquisa.send_keys(Keys.RETURN)
    time.sleep(a*2)
    pl_exchange_rate = driver.find_element(By.XPATH, '//*[@id="knowledge-currency__updatable-data-column"]/div[1]/div[2]/span[1]').text.strip()
    pl_exchange_rate = pl_exchange_rate.replace(',','.')
    pl_exchange_rate = float(pl_exchange_rate)
    driver.quit()
    
    
    entrega_list = []
    preco_total_list = []
    marketplace_list = []
    seller_name_list = []
    seller_link_list = []
    seller_price_list = []
    seller_condition_list = []
    seller_delivery_cost_list = []
    asin_list = []
    seller_condition_list = []
    seller_review_list = []
    seller_phone_list = []
    seller_email_list = []
    seller_email_list2 = []
    seller_address_list = []
    seller_VAT_list = []
    seller_company_list = []
    seller_address_list2 = []
    seller_phone_list2 = []

    # set up the webdriver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # navigate to the Amazon home page and change the delivery address
    driver.get("https://www.amazon.pl")
    time.sleep(a*2)
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    time.sleep(a*2)

    # Por a morada no Amazon delivery to
    max_attempts = 5
    attempts = 0
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="a-autoid-0"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    except ElementNotInteractableException:
        pass
    
    while attempts < max_attempts:
        try:
            deliver_to_box = driver.find_element(By.ID, 'nav-packard-glow-loc-icon')
            deliver_to_box.click()
            break
        except NoSuchElementException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.pl")
            time.sleep(a*3)
            attempts += 1
        except ElementNotInteractableException:
            print("O botão de ponto de delivery to não foi encontrado ")
            driver.get("https://www.amazon.pl")
            time.sleep(a*3)
            attempts += 1
            
    if attempts == max_attempts:
        print("Máximo de tentatives, tente de novo.")
    time.sleep(a*2)
    
    driver.maximize_window()
    time.sleep(a*2)
    
    #escolher o país
    #try:
    #    selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryListDropdown"]/span/span').click()
    #   time.sleep(a*1)
    #    selecionar_pais = driver.find_element(By.XPATH, '//*[@id="GLUXCountryList_1"]').click()
    #    time.sleep(a*1)
    #except NoSuchElementException:
    #    pass  
        
    #inserir codigo postal
    try:
        postal_code_box_1= driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput_0"]')
        postal_code_box_2= driver.find_element(By.XPATH, '//*[@id="GLUXZipUpdateInput_1"]')
        postal_code_box_1.clear()
        postal_code_box_1.send_keys("00")
        postal_code_box_2.send_keys("927")
        
    except NoSuchElementException:
        print("O site da Amazon abriu com um formato diferente. Reiniciar o código. Pode acontecer até duas vezes seguidas, nãp deve acontecer mais que isso. Automaticamente o programa fecha o chrome e vai dar erro, mas nada está errado")
    
    update_button = driver.find_element(By.XPATH,'//*[@id="GLUXZipUpdate"]/span/input')
    update_button.click()
    time.sleep(a*2)
    
    #cokies
    try :
        accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
        accept_cookies.click()
    except NoSuchElementException:
        pass
    
    try:
        
        confirmar_loc = driver.find_element(By.XPATH, '//*[@id="a-popover-1"]/div/div[2]/span/span')
        confirmar_loc.click()
        time.sleep(a*2)
    except NoSuchElementException:
        pass
    
    
    # read the list of ASIN codes from the Excel file
    asin_df = pd.read_excel("ASIN_figurinhas.xlsx", sheet_name="Sheet1")
    asin_code_list = asin_df['Column1'].tolist()

    print("Início de pesquisa")

    j=1
    # loop through each ASIN code and get the other sellers information
    for asin_code in asin_code_list:
        try:

            # navigate to the Amazon product page for the ASIN code
            url = 'https://www.amazon.pl/dp/'
            #print(url+asin_code+'/')
            driver.get(url+asin_code+'/')
            time.sleep(a*2)

            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass
            
            time.sleep(a*2)
            
            # find the box with the other sellers information
            try:
                other_sellers_box = driver.find_element(By.XPATH, '//*[@id="olpLinkWidget_feature_div"]/div[2]/span/a/div')
                other_sellers_box.click()
                time.sleep(a*3)
            except NoSuchElementException:
                print('Produto com asin '+str(asin_code)+' não está disponivel ou não tem vendedores de momento')
                continue   
                
        
                
            #numero ofertas
            try:
                time.sleep(a*2)
                numero_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-filter-offer-count-string"]').text.strip()
            except NoSuchElementException:
                numero_ofertas = 11
                
            # extract numbers using regular expression
            try:
                numero_ofertas = re.findall(r'\d+\.\d+|\d+', numero_ofertas)
            except TypeError:
                numero_ofertas = 11

            # convert to float
            try:
                numero_ofertas = float(numero_ofertas[0])
            except TypeError:
                numero_ofertas = 11
                
            if numero_ofertas > 10:
                try:            
                    #Scroll tabela
                    time.sleep(a*3)
                    table = driver.find_element(By.XPATH, '//*[@id="all-offers-display-scroller"]')
                    # move to the table element
                    actions = ActionChains(driver)
                    actions.move_to_element(table).perform()

                    # scroll the table element to the bottom
                    try:
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*2)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        time.sleep(a*1)
                        mostrar_mais_ofertas = driver.find_element(By.XPATH, '//*[@id="aod-show-more-offers"]')
                        mostrar_mais_ofertas.click() 
                        time.sleep(a*1)
                        driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", table)
                        
                    except NoSuchElementException:
                        pass
                    except ElementNotInteractableException:
                        pass 
            
                except NoSuchElementException:
                    pass
                except ElementNotInteractableException:
                    pass
            else:
                pass

                
            # find all the seller information in the "Other Sellers" box
            time.sleep(a*2)
            seller_box = driver.find_element(By.ID, 'aod-offer-list')

            # Iterate over each seller listed in the box and extract their name, link and price
            offers = seller_box.find_elements(By.ID, 'aod-offer')
            i=1
            for offer in offers:

                try:
                    
                    # name
                    try:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').text.strip()
                        seller_name_list.append(seller_name)
                    except NoSuchElementException:
                        seller_name = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > span').text.strip()
                        #print(seller_name)
                        seller_name_list.append(seller_name)


                    #price
                    try:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[1]').text.strip()
                    except NoSuchElementException:
                        seller_price_unit = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[1]').text.strip()
                        #print(seller_price_unit)

                    seller_price_unit = seller_price_unit.replace(' ', '')
                    seller_price_unit = seller_price_unit.replace('zł', '')
                    seller_price_unit = seller_price_unit.replace('.', '')
                    try:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/span/span[2]/span[2]').text.strip()
                    except NoSuchElementException:
                        seller_price_cents = offer.find_element(By.XPATH, '//*[@id="aod-price-'+str(i)+'"]/div/span/span[2]/span[2]').text.strip()

                    seller_price_cents = seller_price_cents.replace('.', '')           
                    seller_price = seller_price_unit + "." + seller_price_cents
                    seller_price = seller_price.replace(' ', '').encode('ascii', 'ignore')
                    seller_price = float(seller_price)
                    seller_price = seller_price * pl_exchange_rate
                    seller_price = round(seller_price, 2)
                    seller_price_list.append(seller_price)

                    #entrega
                    try:
                        entrega = offer.find_element(By.CSS_SELECTOR, '#mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE > span').text.strip()
                    except NoSuchElementException:
                        try:
                            entrega = offer.find_element(By.CSS_SELECTOR, ' #mir-layout-DELIVERY_BLOCK-slot-NO_PROMISE_UPSELL_MESSAGE').text.strip()
                        except NoSuchElementException:
                            entrega = offer.find_element(By.CSS_SELECTOR, '#aod_ship_charge_row > span').text.strip()


                    if "DARMOWA" in entrega:
                        entrega = 0
                        entrega_list.append(entrega)
                    else:
                        start_index_entrega = entrega.find("") + len("") #
                        end_index_entrega = entrega.find("z", start_index_entrega) #
                        entrega = entrega[start_index_entrega:end_index_entrega] # slice the string using the start and end index to extract the desired text
                        entrega = entrega.replace(' ', '')
                        entrega = entrega.replace(',', '.')
                        if entrega == "":
                            entrega=0
                        try:
                            entrega = float(entrega)
                        except TypeError:
                            entrega = 0
                        entrega = entrega * pl_exchange_rate
                        entrega = round(entrega, 2)
                        entrega_list.append(entrega)

                    #preço total
                    try:
                        entrega = float(entrega)
                    except ValueError:
                        entrega = 0

                    try:
                        preco_total = seller_price + entrega
                    except TypeError:
                        preco_total = seller_price
                        pass
                    preco_total_list.append(preco_total)


                    #link
                    try:
                        seller_link = offer.find_element(By.CSS_SELECTOR, '#aod-offer-soldBy > div > div > div.a-fixed-left-grid-col.a-col-right > a').get_attribute('href')
                        seller_link_list.append(seller_link)
                    except NoSuchElementException:
                        seller_link =  "não conseguiu ser extraído"
                        seller_link_list.append(seller_link)

                    #asin
                    asin_code = str(asin_code)
                    asin_list.append(asin_code)

                    #condition
                    seller_condition = offer.find_element(By.CSS_SELECTOR, '#aod-offer > div.a-fixed-right-grid').text.strip()
                    seller_condition_list.append(seller_condition)

                    i=i+1


                except NoSuchElementException:
                    print("produto deu erro")
                    pass
                except TypeError:
                    print("produto deu erro")
                    pass
                except ValueError:
                    print("produto deu erro")
                    pass
                except ElementNotInteractableException:
                    print("produto deu erro")
                    pass   

            print("Produto "+str(j)+" adicionado")
            j=j+1

        except NoSuchElementException:
            print("produto deu erro")
            pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   


    asin_list = list(map(str, asin_list))
    lista_zip = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_condition_list))

    tabela = pd.DataFrame((lista_zip), columns=['Asin',
    'Nome',
    'Preço Produto',
    'Preço Entrega',
    'Preço Total',
    'Link',
    'Estado do produto'])
    print("Tabela feita")
    
    tabela = tabela[~tabela['Nome'].str.contains("amazon", case = False)]
    tabela = tabela[~tabela['Nome'].str.contains("não conseguiu ser extraído", case = False)]
    tabela = tabela[~tabela['Link'].str.contains("não conseguiu ser extraído", case = False)]
    
    # Remover os vendedores duplicados
    tabela = tabela.drop_duplicates(subset=['Nome'], keep='first')
    #tabela = tabela.reset_index(drop=True)
    
    # get index values of remaining rows
    idx = tabela.index.tolist()

    
    
    # drop elements from corresponding lists
    asin_list = [asin_list[i] for i in idx]
    seller_name_list = [seller_name_list[i] for i in idx]
    seller_price_list = [seller_price_list[i] for i in idx]
    seller_link_list = [seller_link_list[i] for i in idx]
    seller_condition_list = [seller_condition_list[i] for i in idx]
    entrega_list = [entrega_list[i] for i in idx]
    preco_total_list = [preco_total_list[i] for i in idx]


    # quit the webdriver
    driver.quit()


    print("Início de pesquisa detalhes dos vendedores")
    seller_review_list = []
    l = 1
    driver = webdriver.Chrome(ChromeDriverManager().install())
    for link in seller_link_list:
        try:

            driver.get(link)
            time.sleep(a*3)
            #aceitar cookies
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            #Perceber se a pgina de vendedor existe e se nao preencher as variaveis com n/a e continuar para o proximo vendedor
            try:
                elemento_existencia = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div/div/div[1]/div[1]/h3').text.strip()
            except NoSuchElementException:
                seller_review = "Não existe"
                seller_review_list.append(seller_review)
                seller_email = "Não existe"
                seller_email_list.append(seller_email)
                seller_email2 = "Não existe"
                seller_email_list2.append(seller_email2)
                seller_phone = "Não existe"
                seller_phone_list.append(seller_phone)
                seller_phone2 = "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                seller_condition = "Não existe"
                seller_condition_list.append(seller_condition)
                marketplace_list.append(marketplace)
                seller_address2 = "Não existe"
                seller_address_list2.append(seller_address2)
                print("Página de vendedor não dispovível")
                continue
                
            try :
                accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                accept_cookies.click()
            except NoSuchElementException:
                pass

            if l == 1 :
                
                try :
                    accept_cookies = driver.find_element(By.XPATH, '//*[@id="sp-cc-accept"]')
                    accept_cookies.click()
                except NoSuchElementException:
                    pass
        
        
            
            #extrair review
            try:
                driver.find_element(By.XPATH, '//*[@id="page-section-feedback"]/div/div/div/div[1]/h3')
            except NoSuchElementException:
                seller_review = "nao está disponível"
                
            try:
                seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-lifetime-description"]').text.strip()
                if seller_review == "":
                    try:
                        seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                        if seller_review == "":
                            seller_review = "sao os dois nada"
                            
                    except NoSuchElementException:
                        seller_review = "life é nada e nao encontrou anual"
                    
            except NoSuchElementException: 
                try:
                    seller_review = driver.find_element(By.XPATH, '//*[@id="effective-timeperiod-rating-year-description"]').text.strip()
                    if seller_review == "":
                        seller_review = "nao encontrou lifetime e ano é nada"
                except NoSuchElementException:
                    seller_review = "não disponível"
                

            seller_review_list.append(seller_review)
            
            #Tentar carregar butao show more
            try:
                butao_show_more = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]/span/a/span/span[1]').click()

            except NoSuchElementException:
                pass


            try: 
                primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                primeira_caixa_2 = driver.find_element(By.XPATH, '//*[@id="spp-expander-about-seller"]/div[2]').text.strip()
                
            except NoSuchElementException:
                try:
                    primeira_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-about-seller"]/div/div/div').text.strip()
                except NoSuchElementException:
                    primeira_caixa = "Não existe"
            
            ########
            
            try:
                #numero de telefone
                try:
                    seller_phone = driver.find_element(By.XPATH, '//*[@id="seller-contact-phone"]').text.strip()
                except NoSuchElementException:
                    start_index_telefone = primeira_caixa.find("telefonu") + len("telefonu") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = primeira_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = primeira_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(":","")
                    seller_phone =seller_phone.replace(" ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                                        
                

                #email
                words = primeira_caixa.split()
                seller_email = "n/a"
                seller_email2 = "n/a"

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break
            


            except NoSuchElementException:
                primeira_caixa = "nao existe"
                seller_phone = 'indisponível'
                seller_phone_list.append(seller_phone)
                seller_email = 'indisponível'
                seller_email_list.append(seller_email)
                pass
                
            if seller_phone == "":
                seller_phone == "Não existe teste"
                
            if seller_email == "":
                seller_email == "Não existe teste"

            # tentar extrair informaçao da segunda parte
            try:
                segunda_caixa = driver.find_element(By.XPATH, '//*[@id="page-section-detail-seller-info"]/div/div/div').text.strip()
                
                
                
                #morada
                start_index_address = segunda_caixa.find("Adres firmy:") + 1
                seller_address = segunda_caixa.strip()
                start_index_address = seller_address.find("Adres firmy:") + len("Adres firmy:")
                seller_address = seller_address[start_index_address:].strip().replace("\n", ", ")
                seller_address_list.append(seller_address)
                
                #morada 2
                start_index_address2 = segunda_caixa.find("Adres obsługi klienta:") + 1
                seller_address2 = segunda_caixa.strip()
                start_index_address2 = seller_address2.find("Adres obsługi klienta:") + len("Adres obsługi klienta:")
                end_index_address2 = segunda_caixa.find("Adres firmy:", start_index_address2)
                seller_address2 =  segunda_caixa[start_index_address2:end_index_address2]
                seller_address2 = seller_address2[start_index_address2:].strip().replace("\n", ", ")
                seller_address_list2.append(seller_address2)


                #VAT
                start_index_VAT = segunda_caixa.find("Numer VAT: ") + len("Numer VAT: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_VAT = segunda_caixa.find("\n", start_index_VAT) # find the next newline character after the starting index
                seller_VAT = segunda_caixa[start_index_VAT:end_index_VAT] # slice the string using the start and end index to extract the desired text
                seller_VAT_list.append(seller_VAT)

                #company
                start_index_company = segunda_caixa.find("Nazwa firmy: ") + len("Nazwa firmy: ") # find the index of the word "IVA:" and add its length to get the starting index
                end_index_company = segunda_caixa.find("\n", start_index_company) # find the next newline character after the starting index
                seller_company = segunda_caixa[start_index_company:end_index_company] # slice the string using the start and end index to extract the desired text
                seller_company_list.append(seller_company)

                #append marketplace
                marketplace_list.append(marketplace)
                
                #email
                words = segunda_caixa.split()

                for i in range(len(words)):
                    word = words[i].strip(".")
                    if "@" in word:
                        if seller_email == "n/a":
                            seller_email = word
                        elif seller_email2 == "n/a":
                            seller_email2 = word
                        else:
                            seller_email = "n/a"
                            seller_email2 = "n/a"
                            break

                    
                seller_email_list.append(seller_email)
                seller_email_list2.append(seller_email2)
            
                #Numero de telefone
                if seller_phone == "":
                    start_index_telefone = segunda_caixa.find("Numer telefonu: ") + len("Numer telefonu: ") # find the index of the word "télefono:" and add its length to get the starting index
                    end_index_telefone = segunda_caixa.find("\n", start_index_telefone) # find the next newline character after the starting index
                    seller_phone = segunda_caixa[start_index_telefone:end_index_telefone] # slice the string using the start and end index to extract the desired text
                    seller_phone =seller_phone.replace(": ","")
                    if not any(char.isdigit() for char in seller_phone):
                        seller_phone = ""
                seller_phone_list.append(seller_phone)
                
                #telefone 2
                import re
                # Define the regular expression pattern
                pattern = r"\+[\d -]+"

                # Search for the phone number in the string using the regular expression pattern
                match = re.search(pattern, primeira_caixa)

                # If a phone number is found, print it
                if match:
                    seller_phone2 = match.group()
                else:
                    seller_phone2 = "tentar segunda caixa"
                    
                
                if seller_phone2 == "tentar segunda caixa" :
                    # Search for the phone number in the string using the regular expression pattern
                    match = re.search(pattern, segunda_caixa)

                    # If a phone number is found, print it
                    if match:
                        seller_phone2 = match.group()
                    else:
                        seller_phone2 = "n/a"
                seller_phone_list2.append(seller_phone2)
            
            
            except NoSuchElementException:
                seller_address = "Não existe"
                seller_address_list.append(seller_address)
                seller_phone2= "Não existe"
                seller_phone_list2.append(seller_phone2)
                seller_address2= "Não existe"
                seller_address_list2.append(seller_address2)
                seller_VAT = "Não existe"
                seller_VAT_list.append(seller_VAT)
                seller_company = "Não existe"
                seller_company_list.append(seller_company)
                marketplace_list.append(marketplace)
                pass
            
            print("Info de vendedor " + str(l) + " recolhida")
            l= l+1
        except NoSuchElementException:
                print("produto deu erro")
                pass
        except TypeError:
            print("produto deu erro")
            pass
        except ValueError:
            print("produto deu erro")
            pass
        except ElementNotInteractableException:
            print("produto deu erro")
            pass   


    lista_zip_final = list(zip(asin_list,
    seller_name_list,
    seller_price_list,
    entrega_list,
    preco_total_list,
    seller_link_list,
    seller_review_list,
    seller_condition_list,
    seller_company_list,
    seller_VAT_list,
    seller_address_list,
    seller_email_list,
    seller_phone_list,
    marketplace_list,
    seller_address_list2,
    seller_email_list2,
    seller_phone_list2))

    tabela_final_pl = pd.DataFrame((lista_zip_final), columns=['Asin code',
    'Nome',
    'Preço do Produto',
    'Preço de Entrega',
    'Preço Total',
    'Link',
    'Avaliação do vendedor (Estrelas)',
    'Estado do produto',
    'Nome da empresa',
    'VAT',
    'Morada',
    'Email',
    'Telefone',
    'Marketplace',
    'Morada 2',
    'Email 2',
    'Telefone 2'])
    
    #Adicionar coluna de codigo de país
    # Define a function to extract the last two characters after the last comma in a string
    def extract_last_two_characters(string):
        return string.split(',')[-1].strip()[-2:]

    # Create a new column 'Código país' next to 'Morada' column in the same dataframe
    tabela_final_pl['Código país'] = tabela_final_pl['Morada'].apply(extract_last_two_characters)

    print("Tabela feita")

    et = time.time()
    elapsed_time = et - st
    tempo_codigo = elapsed_time /60
    k = len(seller_name_list)

    #Upload no excel
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows
    from openpyxl import load_workbook
    # Load the existing Excel file
    wb = openpyxl.load_workbook('Amazon_seller_data_final.xlsx')

    # Select the "PL" sheet
    ws = wb['PL']

    # Find the last row of the existing table
    last_row = ws.max_row

    # Append the new data starting from the row below the last row of the existing table
    for r_idx, row in enumerate(dataframe_to_rows(tabela_final_pl, index=False, header=True), 1):
        if r_idx > 1:  # exclude the first row (headers)
            ws.append(row)


    #Save the changes to the Excel file
    wb.save('Amazon_seller_data_final.xlsx')
    print("Dados adicionados à tabela")
    print ('Programa rodado com sucesso.', k ,'vendedores recolhidos')
    print('Tempo de execução:', '%.2f' %tempo_codigo, 'minutos')
    
#### # Menu principal
while True:
    print("=== MENU ===")
    print("0 - Sair")
    print("1 - Espanha")
    print("2 - Italia")
    print("3 - Alemanha")
    print("4 - Suecia")
    print("5 - França")
    print("6 - Netherlands")
    print("7 - UK")
    print("8 - Poland")
    print("9 - Todos")

    opcao = input("Selecione uma opção: ")

    if opcao == "0":
        print("Programa encerrado")
        break

    elif opcao == "1":
        amazon_es()

    elif opcao == "2":
        amazon_it()
        
    elif opcao == "3":
        amazon_de()

    elif opcao == "4":
        amazon_se()
        
    elif opcao == "5":
        amazon_fr()
        
    elif opcao == "6":
        amazon_nl()

    elif opcao == "7":
        amazon_uk()

    elif opcao == "8":
        amazon_pl()
    
    elif opcao == "9":
        st_todos = time.time()
        print("Código para todos os países iniciado")
        try:
            amazon_es()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass

        try:
            amazon_it()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass

        try:
            amazon_de()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        
        try:
            amazon_se()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        
        try:
            amazon_fr()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        
        try:
            amazon_nl()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        
        try:
            amazon_uk()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        
        try:
            amazon_pl()
        except NoSuchElementException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except ElementNotInteractableException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except NoSuchWindowException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        except WebDriverException:
            print("ERRO: Codigo da amrketplace nao completado")
            pass
        et_todos = time.time()
        elapsed_time_todos = et_todos - st_todos
        tempo_codigo_todos = elapsed_time_todos /60
        print('Tempo de execução de todos os marketplaces:', '%.2f' %tempo_codigo_todos, 'minutos')

    else:
        print("Opção inválida.")